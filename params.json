{"name":"CloudConvert Laravel","tagline":"A Laravel wrapper for the CloudConvert API","body":"\r\n\r\n\r\n# CloudConvert Laravel API\r\n\r\n\r\nA Laravel wrapper for the CloudConvert API. See [https://cloudconvert.org](https://cloudconvert.org) for more details.\r\n\r\n[![Build Status](https://travis-ci.org/robbiepaul/cloudconvert-laravel.svg?branch=v0.1)](https://travis-ci.org/robbiepaul/cloudconvert-laravel)\r\n \r\n\r\n \r\n## Installation\r\n \r\nInstall this package through [Composer](https://getcomposer.org/). \r\n\r\nAdd this to your `composer.json` dependencies:\r\n\r\n```js\r\n\"require\": {\r\n   \"robbiep/cloudconvert-laravel\": \"1.*@dev\"\r\n}\r\n```\r\n\r\nRun `composer install` to download the required files.\r\n\r\nNext you need to add the service provider to `config/app.php`\r\n\r\n```php\r\n'providers' => array(\r\n    ...\r\n    'RobbieP\\CloudConvertLaravel\\CloudConvertLaravelServiceProvider'\r\n)\r\n```\r\nOne more step. \r\n\r\nYou need to publish the config `php artisan config:publish robbiep/cloudconvert-laravel`\r\n\r\nJust enter your API key in `config/packages/robbiep/cloudconvert-laravel/config.php` \r\n> You can get your free API key by just registering at [https://cloudconvert.org](https://cloudconvert.org)\r\n\r\n\r\nNow you can use CloudConvert in your application!\r\n\r\n## Usage\r\nThere's many ways to use CloudConvert. I'll cover a few of them here, for all the converter options I suggest checking out the API docs.\r\n \r\n### File conversion\r\n```php\r\n# Convert the file to /a/path/to/file.mp4\r\nCloudConvert::file('/a/path/to/file.mov')->to('mp4');\r\n\r\n\r\n# Convert the file and save it in a different location /a/new/path/to/new.mp4\r\nCloudConvert::file('/a/path/to/biggles.webm')->to('/a/new/path/to/new.mp4');\r\n\r\n\r\n# It also works with Laravel's file upload\r\nif (Input::hasFile('photo'))\r\n{\r\n    CloudConvert::file( Input::file('photo') )->to('/a/local/path/profile_image.jpg');\r\n}\r\n\r\n\r\n# Convert the image to kitty.jpg with quality of 70%\r\nCloudConvert::file('kitty.png')->quality(70)->to('jpg');\r\n\r\n\r\n# Convert a PowerPoint presentation to a set of images, let's say you only want slides 2 to 4\r\n# This will save presentation-2.jpg, presentation-3.jpg and presentation-4.jpg\r\nCloudConvert::file('presentation.ppt')->pageRange(2, 4)->to('jpg');\r\n\r\n```\r\n\r\n#### Converter options\r\nThere are many more conversion options. I've put shortcuts like the ones above for the most common. However you can pass through any options you like using the `withOptions` method, such as:\r\n\r\n```php\r\n# Convert the meow.wav to meow.mp3 with a frequecy of 44100 Hz and normalize the audio to +20dB\r\nCloudConvert::file('meow.wav')->withOptions([\r\n    'audio_frequency' => '44100', \r\n    'audio_normalize' => '+20dB'\r\n])->to('mp3');\r\n\r\n\r\n# Convert the fido_falls_over.mp4 to fido.gif but you only want 10 seconds of it, starting at 1:02\r\nCloudConvert::file('fido_falls_over.mp4')->withOptions([\r\n    'trim_from' => '62', \r\n    'trim_to' => '72'\r\n])->to('fido.gif');\r\n\r\n# Or the same with using the shortcuts:\r\nCloudConvert::file('fido_falls_over.mp4')->trimFrom(62)->trimTo(72)->to('fido.gif');\r\n```\r\n#### Chaining multiple conversions\r\nYou can also chain multiple conversions on one process, like this:\r\n```php\r\n# Convert a TrueType font in to all the fonts you need for a cross browser web font pack\r\nCloudConvert::file('claw.ttf')->to('eot')->to('otf')->to('woff')->to('svg');\r\n```\r\n#### Remote files\r\nIt will also work with converting remote files (just make sure you provide a path to save it to)\r\n```php\r\n# Convert Google's SVG logo hosted on Wikipedia to a png on your server\r\nCloudConvert::file('http://upload.wikimedia.org/wikipedia/commons/a/aa/Logo_Google_2013_Official.svg')\r\n            ->to('images/google.png');\r\n```\r\n\r\n### Website screenshot\r\nCloudConvert will also take a screenshot of a website and convert it to an image or pdf for you:\r\n```php\r\n# Take a screenshot with the default options: 1024px with with full height of webpage\r\nCloudConvert::website('www.nyan.cat')->to('screenshots/nyan.jpg');\r\n\r\n\r\n# You can also specify the width and the height as converter options\r\nCloudConvert::website('www.nyan.cat')\r\n            ->withOptions([\r\n                 'screen_width' => 1024,\r\n                 'screen_height' => 700\r\n            ])->to('screenshots/nyan.png');\r\n```\r\n\r\n### Converting to and from external storage options\r\nAt the moment CloudConvert let you use *FTP* or *Amazon S3* as storage options. However it looks like in the future they will add *Google Drive* and *Dropbox* to the API\r\n> **Please note: **\r\n> To use these storage options you will need to provide the configuration in the `config/packages/robbiep/cloudconvert-laravel/config.php` \r\n\r\n```php\r\n# Lets say you have a PDF and you want to convert it to an ePub file and \r\n# store it on your Amazon S3 bucket (defined in your config). It's this simple:\r\nCloudConvert::file('/a/local/path/garfield.pdf')->to(CloudConvert::S3('Garfield_converted.epub'));\r\n\r\n\r\n# You can also override the default options by providing them as an array as the second argument\r\nCloudConvert::file('/a/local/path/garfield.pdf')\r\n            ->to(CloudConvert::S3('Garfield_converted.epub', [\r\n                'bucket'  => 'a-different-bucket',\r\n                'acl'     => 'public-read',\r\n                'region'  => 'us-east-1'\r\n            ]));\r\n            \r\n            \r\n# Now you want to convert the file on your S3 to a txt file and store it on a server via FTP\r\nCloudConvert::file(CloudConvert::S3('Garfield_converted.epub'))\r\n            ->to(CloudConvert::FTP('path/to/garfield.txt'));\r\n```\r\nIt's that simple. The storage options `CloudConvert::S3($path)` and `CloudConvert::FTP($path)` can be used for both input files and output files.\r\n\r\n### Non-blocking conversion using a callback URL\r\nIf the conversion might take a long you could use:\r\n```php\r\n# Script: send_conversion.php\r\nCloudConvert::file('/a/path/to/file.mov')\r\n            ->callback('http://myserver.com/save_file.php')\r\n            ->convert('mp4');\r\n\r\n# Script save_file.php\r\nCloudConvert::useProcess($_REQUEST['url'])\r\n            ->save();\r\n```\r\n\r\n### Non-blocking conversion using a queue\r\nTo use queues you will need have set-up either beanstalk or iron in your `config/queue.php`\r\n```php\r\n# The queue will check every second if the conversion has finished. \r\n# It times out after 120 seconds (configurable).\r\nCloudConvert::file('/a/path/to/file.mov')->queue('to', '/a/path/to/file.mp4')\r\n```\r\n\r\n### Conversion types\r\nYou can view the conversion types using the `conversionTypes()` method. It always returns a Laravel collection.\r\n```php\r\n# To get all possible types\r\n$types = CloudConvert::conversionTypes();\r\n\r\n\r\n# To get all possible types in a specific group\r\n$types = CloudConvert::conversionTypes('video');\r\n\r\n\r\n# To get all possible output formats if you know the input format\r\n$types = CloudConvert::input('pdf')->conversionTypes();\r\n\r\n\r\n# Same if you know the output format and want to see what can be inputted\r\n$types = CloudConvert::output('jpg')->conversionTypes();\r\n```\r\n\r\n### Processes status\r\nYou may want to list all your processes, running, finished and failed. It always returns a Laravel collection.\r\n```php\r\n# To get all possible types\r\n$processes = CloudConvert::processes();\r\n\r\n# To delete a process by ID\r\nCloudConvert::deleteProcess($process_id);\r\n```\r\n\r\n## Artisan commands\r\nIf you want to do quick conversions or calls to the API from your console, you can use the following commands:\r\n\r\n#### Convert a file\r\n```bash\r\n# Options: --opions, --queue, --storage, --path\r\nphp artisan cloudconvert:convert video.mov mp4\r\nphp artisan cloudconvert:convert /path/to/video.mov converted.mp4 --storage='s3'\r\n```\r\n\r\n#### Website screenshot\r\n```bash\r\n# Options: --opions, --storage, --path\r\nphp artisan cloudconvert:website www.laravel.com jpg\r\n```\r\n\r\n#### Processes list\r\n```bash\r\n# Options: --delete (used with process_id)\r\n# Argument: process_id (optional) - will show the status of that process\r\nphp artisan cloudconvert:processes <process_id>\r\n```\r\n\r\n#### Conversion types\r\n```bash\r\n# Options: --input, --output \r\n# (both optional - however if you included both you will see all the \r\n# possible converter options for those types, not just the default ones)\r\nphp artisan cloudconvert:types\r\nphp artisan cloudconvert:types --input='nice.pdf'\r\nphp artisan cloudconvert:types --input='doc' --output='jpg'\r\n```\r\n\r\n## Todo\r\n- [x] Release\r\n- [ ] Write some more tests\r\n- [ ] Enable merging of multiple files\r\n- [x] Enable multiple conversions using one process\r\n- [ ] Refactor the commands\r\n \r\n## Contributing\r\n \r\n1. Fork it\r\n2. Create your feature branch: `git checkout -b my-new-feature`\r\n3. Commit your changes: `git commit -am 'Add some feature'`\r\n4. Push to the branch: `git push origin my-new-feature`\r\n5. Submit a pull request \r\n  \r\n## Credits\r\n \r\nThanks to [Lunaweb Ltd.](http://www.lunaweb.de/) for their API. Go [check it out](https://cloudconvert.org/page/api).\r\n \r\n## Resources\r\n\r\n* [API Documentation](https://cloudconvert.org/page/api)\r\n* [Conversion Types](https://cloudconvert.org/formats)\r\n* [CloudConvert Blog](https://cloudconvert.org/blog)\r\n","google":"UA-57007731-1","note":"Don't delete this file! It's used internally to help with page regeneration."}